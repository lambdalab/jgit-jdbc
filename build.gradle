plugins {
  id "io.morethan.jmhreport" version "0.7.0"
}

group 'com.lambdalab'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'io.morethan.jmhreport'

repositories {
  mavenCentral()
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

def jgitVersion = '4.8.0.201706111038-r'

sourceSets {
  main {
    scala {
      srcDirs = ['src/main/scala']
    }
  }
  test {
    scala {
      srcDirs = ['src/test/scala']
    }
  }
  jmh {
    compileClasspath += sourceSets.test.runtimeClasspath
    runtimeClasspath += sourceSets.test.runtimeClasspath
  }
}
dependencies {
  compile 'org.scala-lang:scala-library:2.11.8'
  compile(group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: jgitVersion) {
    exclude group: "org.apache.httpcomponents", module:"httpclient"
  }
  compileOnly 'postgresql:postgresql:9.1-901-1.jdbc4'
  compile 'com.datastax.cassandra:cassandra-driver-core:3.3.2'

  compile 'ch.qos.logback:logback-classic:1.2.3'
  compile 'org.scalikejdbc:scalikejdbc_2.11:3.1.0'
  compile 'org.apache.httpcomponents:httpclient:4.5'
  compile 'commons-io:commons-io:2.6'
  testCompile 'com.github.docker-java:docker-java:3.0.9'
  testCompile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit.junit', version: jgitVersion
  testCompile 'org.scalatest:scalatest_2.11:3.0.0'
  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile 'mysql:mysql-connector-java:5.1.35'
  testCompile 'postgresql:postgresql:9.1-901-1.jdbc4'
  testCompile group: 'com.google.caliper', name: 'caliper', version: '1.0-beta-2'

  testCompile project
  testCompile 'org.openjdk.jmh:jmh-core:1.18'
  testCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.18'
}

task benchmark(type: JavaExec, dependsOn: testClasses) {
  main = 'benchmarks.Main'
  classpath = sourceSets.test.runtimeClasspath
  jvmArgs = ["-XX:-TieredCompilation","-Xmx1G","-XX:NewSize=4G"]
  args = ["-p","-i","runtime"]
}

task jmh(type: JavaExec, description: 'Executing JMH benchmarks') {
  classpath = sourceSets.jmh.runtimeClasspath
  main = 'org.openjdk.jmh.Main'

  def include = project.properties.get('include', '');
  def exclude = project.properties.get('exclude');
  def format = project.properties.get('format', 'json');
  def profilers = project.properties.get('profilers');
  def jvmArgs = project.properties.get('jvmArgs')

  def resultFile = file("build/reports/jmh/result.${format}")
  resultFile.parentFile.mkdirs()

  args include
  if(exclude) {
    args '-e', exclude
  }
  args '-foe', 'true'   //fail-on-error
  args '-v', 'NORMAL'   //verbosity [SILENT, NORMAL, EXTRA]
  if(profilers) {
    profilers.split(',').each {
      args '-prof', it
    }
  }
  args '-jvmArgsPrepend', '-Xmx512m'
  args '-jvmArgsPrepend', '-Xms512m'
  if(jvmArgs) {
    for(jvmArg in jvmArgs.split(' ')) {
      args '-jvmArgsPrepend', jvmArg
    }
  }
  args '-rf', format
  args '-rff', resultFile

  doFirst {
    println "\nExecuting JMH with: $args \n"
  }
}